angular.module('myConfig', []);
angular.module('mainApp', ['ngRoute', 'ngSanitize', 'ngCookies', 'ezfb', 'ngCart', 'ngImgCrop', 'myConfig'])
    .config(['ezfbProvider', '$httpProvider', '$logProvider', '$locationProvider', '$compileProvider', 'appConfig',
        function (ezfbProvider, $httpProvider, $logProvider, $locationProvider, $compileProvider, appConfig) {
            ezfbProvider.setInitParams({
                appId: appConfig.facebookAppId
            });
            $logProvider.debugEnabled(false);
            $compileProvider.debugInfoEnabled(true);

            $locationProvider.hashPrefix("!");

            $httpProvider.defaults.xsrfCookieName = 'csrftoken';
            $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
            $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';

        }])
    .run(['$rootScope', '$window', '$timeout', 'Auth', function ($rootScope, $window, $timeout, Auth) {

        wow = new WOW(
            {
                animateClass: 'animated',
                offset: 100
            }
        );
        wow.init();

        $rootScope.$on('$routeChangeSuccess', function (next, current) {
            //when the view changes sync wow
            $('.modal').modal('hide');

            Auth.checkTermsFlag();

            wow.sync();
            $window.scrollTo(0, 0);

            $(window).scroll(function () {
                if ($(document).scrollTop() < 100) {
                    $(".top-site").fadeOut('slow');
                }
                else {

                    $(".top-site").fadeIn('slow');
                }
            });

            $(".top-site i").on('click', function () {
                //alert("1");
                $("html, body").animate({
                    scrollTop: 0
                }, 1000);
            });

            $timeout(function() {
               $('#right-menu').sidr({
                      name: 'sidr-right',
                      side: 'right'
                    });
                   $('#left-menu').sidr({
                      name: 'sidr-left',
                      side: 'left'
                    });

                    $('label.tree-toggler').click(function () {
                        $(this).parent().children('ul.tree').toggle(300);
                    });
            }, 100);

        });
    }])
    .config(['$routeProvider', function ($routeProvider) {
        $routeProvider
            .when('/home', {
                controller: 'IndexController',
                templateUrl: 'static/app/templates/index.html',
                resolve: {
                    competition: function (CompetitionService) {
                        return CompetitionService.getActive();
                    }
                }
            })
            .when('/', {
                controller: 'IndexController',
                templateUrl: 'static/app/templates/index.html',
                resolve: {
                    competition: function (CompetitionService) {
                        return CompetitionService.getActive();
                    }
                }
                /*
                controller: 'CompetitionController',
                templateUrl: 'static/app/templates/competition.html',
                resolve: {
                    competition: function (CompetitionService) {
                        return CompetitionService.getActive();
                    }
                }
                */
            })
            .when('/competition/:competition_id', {
                controller: 'CompetitionController',
                templateUrl: 'static/app/templates/competition.html',
                resolve: {
                    competition: function (CompetitionService, $route) {
                        return CompetitionService.getById($route.current.params.competition_id);
                    }
                }
            })
            .when('/questionnaire', {
                controller: 'QuestionnaireController',
                templateUrl: 'static/app/templates/questionnaire.html',
                resolve: {
                    questionnaire: function (QuestionnaireService) {
                        return QuestionnaireService.getActive();
                    }
                }
            })
            .when('/questionnaire/:questionnaire_id', {
                controller: 'QuestionnaireController',
                templateUrl: 'static/app/templates/questionnaire.html',
                resolve: {
                    competition: function (QuestionnaireService, $route) {
                        return QuestionnaireService.getById($route.current.params.questionnaire_id);
                    }
                }
            })
            .when('/company/:text_id', {
                controller: 'TextController',
                templateUrl: 'static/app/templates/text.html'
            })
            .when('/service/:text_id', {
                controller: 'TextController',
                templateUrl: 'static/app/templates/text.html'
            })
            .when('/winners/prizes/:code/', {
                controller: 'WinnerPrizeListController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/prize-list-only-prizes.html',
                resolve: {
                }
            })
            .when('/winners/prize/:prize_id/', {
                controller: 'WinnerPrizeDetailController',
                templateUrl: 'static/app/templates/prize-detail.html'
            })
            .when('/winners/confirm', {
                controller: 'WinnerConfirmController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/prize-confirm.html',
                resolve: {
                }
            })
            .when('/winners/tnx', {
                templateUrl: 'static/app/templates/prize-tnx.html',
                resolve: {
                }
            })
            .when('/shop', {
                controller: 'PrizeController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/prize-list-only-prizes.html',
                resolve: {
                }
            })
            .when('/shop-old', {
                controller: 'CatalogController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/prize-list.html',
                resolve: {
                    categories: function (CatalogService) {
                        return CatalogService.loadCategories();
                    },
                    competition: function (CompetitionService, $route) {
                        return CompetitionService.getActive();
                    }
                }
            })
            .when('/winners', {
                controller: 'WinnersController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/winners.html',
                resolve: {
                }
            })
            .when('/competition/:competition_id/prizes', {
                controller: 'PrizeListController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/prize-list.html',
                resolve: {
                    competition: function (CompetitionService, $route) {
                        return CompetitionService.getById($route.current.params.competition_id);
                    }
                }
            })
            .when('/competition/:competition_id/prize/:prize_id', {
                controller: 'CompetitionController',
                templateUrl: 'static/app/templates/competition.html',
                resolve: {
                    competition: function (CompetitionService, $route) {
                        return CompetitionService.getById($route.current.params.competition_id);
                    }
                }
            })
            .when('/competition/:competition_id/photo/:photo_id', {
                controller: 'CompetitionController',
                templateUrl: 'static/app/templates/competition.html',
                resolve: {
                    competition: function (CompetitionService, $route) {
                        return CompetitionService.getById($route.current.params.competition_id);
                    }
                }
            })
            .when('/prize/:prize_id/', {
                controller: 'PrizeDetailController',
                templateUrl: 'static/app/templates/prize-detail.html'
            })
            .when('/select-photo-fb', {
                controller: 'FacebookSelectPhotoController',
                templateUrl: 'static/app/templates/select-photo.html',
                resolve: {
                    competition: function (CompetitionService) {
                        return CompetitionService.getActive();
                    },
                    'PhotoServiceData': function (PhotoService) {
                        // MyServiceData will also be injectable in your controller, if you don't want this you could create a new promise with the $q service
                        return PhotoService.promise;
                    }
                }
            })
            .when('/select-photo-ig', {
                controller: 'InstagramSelectPhotoController',
                templateUrl: 'static/app/templates/select-photo.html'
            })
            .when('/cart', {
                controller: 'CartController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/cart.html',
                resolve: {
                    competition: function (CompetitionService) {
                        return CompetitionService.getActive();
                    }
                }
            })
            .when('/prizeCart', {
                controller: 'CartController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/prizeCart.html',
                resolve: {
                    competition: function (CompetitionService) {
                        return CompetitionService.getActive();
                    }
                }
            })
            .when('/order/checkout', {
                controller: 'CheckoutOrderController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/order-checkout.html'

            })
            .when('/order/confirm', {
                controller: 'ConfirmOrderController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/order-confirm.html'

            })
            .when('/order/tnx', {
                controller: 'TnxOrderController',
                controllerAs: 'vm',
                templateUrl: 'static/app/templates/order-tnx.html'

            })
            .otherwise({
                redirectTo: '/'
            });

    }])
    .controller('ApplicationController', ['$scope', '$location', '$http', 'ezfb', 'Auth', 'ngCart', '$timeout', 'CompetitionService',
        function ($scope, $location, $http, ezfb, Auth, ngCart, $timeout, CompetitionService) {
            $scope.Auth = Auth;
            $scope.infoMessage = "";
            $scope.topCompetitionId = appConfig.topCompetitionId;
            $scope.ngCart = ngCart;
            $scope.competitionId = 0;
            $scope.competitionList = [];

            $scope.$on('ngCart:change', function(){
                //console.log(ngCart.getTotalItems());
                $scope.cartItemCount = ngCart.getTotalItems();
            });

            $scope.onFooterLoad = function () {
                /* Scroll to top*/
                $(window).scroll(function () {
                    if ($(document).scrollTop() < 100) {
                        $(".top-site").fadeOut('slow');
                    }
                    else {

                        $(".top-site").fadeIn('slow');

                    }
                });

                $(".top-site i").on('click', function () {
                    $("html, body").animate({
                        scrollTop: 0
                    }, 1000);
                });
            };

            $scope.onHeaderLoad = function() {
                //$.slidebars();
                $timeout(function() {
                    var mySlidebars = new $.slidebars();
                },1000);
            };

            $scope.showInfoMessage = function (infoMessage) {
                $scope.infoMessage = infoMessage;

                $('#info-popup').modal("show");
            };

            $scope.login = function (provider) {
                Auth.login(provider).then(function(ret) {
                    $timeout(function() {
                        console.log(Auth.isAuth(), ret);
                        appConfig.isAuth = true;
                        appConfig.avatar = ret.avatar;
                    },1000);
                });
                $('#signup-opt').modal("hide");
            };

            $scope.logout = function () {
                Auth.logout();
            };

            $scope.termsFlag = false;

            $scope.termsClick = function () {
                //console.log($scope.termsFlag, typeof $scope.termsFlag);
                if ($scope.termsFlag === true) {
                    Auth.updateTermsFlag();
                }
                else {
                    Auth.logout();
                }
                $('#terms-popup').modal("hide");
            };

            $scope.goToCart = function() {
                $scope.go('/cart');
            };

            $scope.go = function (path) {
                $timeout(function(){
                    $location.url(path);
                }, 100);
                $("#success").modal('hide');
                $('.modal').modal('hide');
            };

            $scope.myImage = '';
            $scope.myCroppedImage = '';

            $scope.uploadImage = function () {
                $('#photo-crop-popup').modal('hide');
                $('#spinner-mod').modal('show');

                $http({
                    method: 'POST',
                    url: '/upload_photo_from_src/',
                    data: $.param({'imgsrc': $scope.myCroppedImage, 'competition_id': $scope.competitionId}),
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}
                })
                .success(function (data, status, headers, config) {
                    var e = $('#fileUploadInput');
                    e.wrap('<form>').closest('form').get(0).reset();
                    e.unwrap();
                    $('#spinner-mod').modal('hide');
                    $location.url("/competition/" + data.competition_id + "/photo/" + data.photo_id);
                })
                .error(function(data, status, headers, config) {
                    $('#spinner-mod').modal('hide');
                    $scope.showInfoMessage("Error while photo upload, try again");
                });
            };

            $scope.showCropImagePopup = function(competitionId) {
                $scope.competitionId = competitionId;
                $('#photo-crop-popup').modal("show");
            };

            var handleFileSelect = function (evt) {
                var file = evt.currentTarget.files[0];
                var reader = new FileReader();
                console.log(file);

                $('#photo-crop-popup').modal("show");

                reader.onload = function (evt) {
                    $scope.$apply(function ($scope) {
                        $scope.myImage = evt.target.result;
                    });
                };
                reader.readAsDataURL(file);
            };

            $scope.selectPhotoFromDesktop = function (competitionId) {
                //console.log(Auth.isAuth());
                if(typeof competitionId != "undefined") {
                    return $scope.selectCompetitionForUpload(competitionId);
                }
                else {
                    $('#upload-popup').modal('show');
                }
            };

            $scope.selectCompetitionForUpload = function(competitionId) {
                $scope.competitionId = competitionId;
                $('#upload-popup').modal('hide');

                if (!Auth.isAuth()) {
                    Auth.showLoginPopup();
                }
                else {
                    $('#fileUploadInput').click();
                }
            };

            $scope.showProduct = function(id) {
                $('#spinner-mod').modal('show');
                $scope.$broadcast('productPopupOpen', id);
            };

            $scope.showWelcomeVideoPopup = function() {
                $('#welcome-video-popup').modal('show');
            };

            $scope.selectPhoto = function (provider, competitionId) {
                if ('facebook' == provider) {
                    ezfb.getLoginStatus().then(function (res) {
                        if(res.status == "connected") {
                            $location.url('/select-photo-fb?competition_id=' + competitionId);
                        }
                        else {
                            Auth.login(provider).then(function () {
                                    $location.url('/select-photo-fb?competition_id=' + competitionId);
                                },
                                function () {
                                    console.log('login canceled');
                                }
                            );
                        }
                    });
                }
                else if ('instagram' == provider) {
                    if (Auth.getAccessToken() !== '') {
                        return $location.url('/select-photo-ig?competition_id=' + competitionId);
                    }

                    if (appConfig.socialAuthProvider == 'instagram') {
                        Auth.loadAccessToken().then(function () {
                                $location.url('/select-photo-ig?competition_id=' + competitionId);
                            },
                            function (error) {
                                console.log(error);
                            }
                        );
                        return true;
                    }

                    Auth.login(provider, '/#!/select-photo-ig?competition_id=' + competitionId);
                }
            };

            function init(){
                CompetitionService.getActiveList().then(function (data) {
                    $scope.competitionList = data;
                });
            }

            init();
            angular.element(document.querySelector('#fileUploadInput')).on('change', handleFileSelect);
        }])
    .directive('productCarousel', function () {
        return function (scope, element, attrs) {
            if (scope.$last) {
                $(element).parent().flickity();
            }
        };
    })
    .directive('productSlickCarousel', function () {
        return function (scope, element, attrs) {
            if (scope.$last) {
                $(element).parent().slick();
            }
        };
    })
    .filter('encodeURIComponent', function () {
        return window.encodeURIComponent;
    })
    .filter('nl2br', ['$sce', function ($sce) {
        return function (msg, is_xhtml) {
            var is_xhtml = is_xhtml || true;
            var breakTag = (is_xhtml) ? '<br />' : '<br>';
            var msg = (msg + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');
            return $sce.trustAsHtml(msg);
        }
    }]);

function createCookie(name, value, days) {
    var expires;

    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}
/**
 * controller for Winners page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('AuthController', AuthController);

    AuthController.$inject = ['$scope', '$timeout', 'Auth'];

    function AuthController($scope, $timeout, Auth) {
        var uc = this;

        uc.login = function(isValid) {
            if(isValid) {
                Auth.register(uc.email, uc.password, uc.username).then(
                    function() {
                        console.log("ok");
                        uc.regFormError = ""
                    },
                    function() {
                        uc.regFormError = "Form validation error";
                        //console.log("reg error");
                    }
                );
            }
        };

        uc.register = function(isValid) {
            if(isValid) {
                Auth.register(uc.email, uc.password, uc.username).then(
                    function() {
                        console.log("ok");
                        uc.regFormError = ""
                    },
                    function() {
                        uc.regFormError = "Form validation error";
                        //console.log("reg error");
                    }
                );
            }
        };
    }
})();
/**
 *
 * Auth service
 * Login/log out, terms popup, FB login etc
 *
 */

(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('Auth', Auth);

    Auth.$inject = ['$http', 'ezfb'];

    /**
     *
     *
     * @namespace Auth
     * @returns {Factory}
     */
    function Auth($http, ezfb) {
        /**
         * @name Authentication
         * @desc The Factory to be returned
         */
        var Auth = {
            register: register,
            isAuth: isAuth,
            getSocialAuthProvider: getSocialAuthProvider,
            setSocialAuthProvider: setSocialAuthProvider,
            setAuth: setAuth,
            getUsername: getUsername,
            getUserAvatar: getUserAvatar,
            login: login,
            logout: logout,
            getAccessToken: getAccessToken,
            loadAccessToken: loadAccessToken,
            getSocialUserId: getSocialUserId,
            showLoginPopup: showLoginPopup,
            showTermsPopup: showTermsPopup,
            updateTermsFlag: updateTermsFlag,
            checkTermsFlag: checkTermsFlag
        };

        return Auth;

        ////////////////////

        function login(provider, next){
            if(provider == 'facebook'){
                //var next = document.location.href;

                //window.open('https://www.facebook.com/dialog/oauth?client_id='+appConfig.facebookAppId+
                //    '&redirect_uri='+  +'&scope=email,user_photos', '', null);

                if(navigator.userAgent.match('CriOS')) {
                    window.location = "/login/facebook?next=/";
                    return;
                }
                //    window.open('https://www.facebook.com/dialog/oauth?client_id='                        +appConfig.facebookAppId+                        '&redirect_uri='+ document.location.href +'&scope=email,user_photos', '', null);


                return ezfb.login(null, {scope: 'email,user_photos'}).then(function (res) {
                      /**
                       * no manual $scope.$apply, I got that handled
                       */
                      if (res.authResponse) {
                          return $.getJSON('/ajax-auth/facebook/?access_token=' + res.authResponse['accessToken'], function(response){
                              appConfig.username = response.username;
                              appConfig.avatar = response.avatar;
                              appConfig.isAuth = true;
                              appConfig.socialAuthProvider = 'facebook';
                              appConfig.socialUserId = response.social_user_id;
                              appConfig.termsFlag = response.terms_flag

                              //$('#login-popup').popup("hide");

                              if(appConfig.termsFlag === false) {
                                  showTermsPopup();
                              }
                              return appConfig;
                          });
                          //updateLoginStatus(updateApiMe);
                      }
                });
            }

            if(provider == 'instagram'){
                if(!next) next = location.href;
                window.location = '/login/instagram?next=' + next;
            }
            return true;
        }

        function showTermsPopup() {
            $('#terms-popup').modal("show");
        }

        function checkTermsFlag() {
            if(appConfig.isAuth && appConfig.termsFlag === false) {
                showTermsPopup();
            }
        }

        function updateTermsFlag() {
            appConfig.termsFlag = true;
            return $http.post('/api/v1/auth/update-terms-flag/');

        }

        function logout() {
            appConfig.isAuth = false;
            appConfig.username = '';
            appConfig.socialAuthProvider = '';
            appConfig.socialUserId = ''
            appConfig.termsFlag = false;

            return $http.post('/api/v1/auth/logout/')
                .then(logoutSuccessFn, logoutErrorFn);
        }

        /**
         * @name logoutSuccessFn
         * @desc Unauthenticate and redirect to index with page reload
         */
        function logoutSuccessFn(data, status, headers, config) {
            //Authentication.unauthenticate();

            appConfig.isAuth = false;
            appConfig.username = '';
            appConfig.socialAuthProvider = '';
            appConfig.socialUserId = ''
            appConfig.termsFlag = false;
        }

        /**
         * @name logoutErrorFn
         * @desc Log "Epic failure!" to the console
         */
        function logoutErrorFn(data, status, headers, config) {
            console.error('Epic failure!');
        }

        function getUsername() {
            return appConfig.username;
        }

        function getUserAvatar() {
            return appConfig.avatar;
        }

        function isAuth() {
            return appConfig.isAuth;
        }

        function setAuth(authFlag) {
            appConfig.isAuth = authFlag;
        }

        function getSocialAuthProvider() {
            return appConfig.socialAuthProvider;
        }

        function setSocialAuthProvider(socialAuthProvider) {
            appConfig.socialAuthProvider = socialAuthProvider;
        }

        function getAccessToken() {
            return appConfig.accessToken;
        }

        function loadAccessToken() {
            return $http.get('/api/v1/auth/get-access-token/')
                .then(function(data, status, headers, config) {
                    appConfig.accessToken = data.data.access_token;
                    console.log(data.data.access_token)
                },
                function(error){
                    console.log('get auth token error');
                    throw error;
                }
            );
        }

        function getSocialUserId() {
            return appConfig.socialUserId;
        }

          /**
           * Update loginStatus result
           */
        function updateLoginStatus (more) {
            return ezfb.getLoginStatus(function (res) {
              $scope.loginStatus = res;

              (more || angular.noop)();
            });
        }

          /**
           * Update api('/me') result
           */
        function updateApiMe () {
            ezfb.api('/me', function (res) {
              $scope.apiMe = res;
            });
        }

        function showLoginPopup(){
            $('#signup-opt').modal("show");
        }

        /**
         * @name register
         * @desc Try to register a new user
         * @param {string} username The username entered by the user
         * @param {string} password The password entered by the user
         * @param {string} email The email entered by the user
         * @returns {Promise}
         * @memberOf thinkster.authentication.services.Authentication
         */
        function register(email, password, username) {
            return $http.post('/api/v1/user/', {
                username: username,
                password: password,
                email: email
            });
        }
    }
})();
/**
 * controller for Winners page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('UserController', UserController);

    UserController.$inject = ['$scope', '$timeout', 'Auth'];

    function UserController($scope, $timeout, Auth) {
        var uc = this;

        uc.register = function(isValid) {
            if(isValid) {
                Auth.register(uc.email, uc.password, uc.username).then(
                    function() {
                        console.log("ok");
                        uc.regFormError = ""
                    },
                    function() {
                        uc.regFormError = "Form validation error";
                        //console.log("reg error");
                    }
                );
            }
        };
    }
})();
/**
 * Products catalog controller
 * Categories loading, show product list
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('CatalogController', CatalogController);

    CatalogController.$inject = ['$scope', '$timeout', 'CatalogService', 'CompetitionService', 'PrizeService'];

    function CatalogController($scope, $timeout, CatalogService, CompetitionService) {
        var vm = this;
        vm.categories = CatalogService.getCategories();
        vm.products = [];
        vm.selectedProduct = {};
        vm.photoCount = 0;
        vm.selectedCategoryId = 0;
        vm.competition = CompetitionService.getCompetition();
        vm.prizes = CompetitionService.getPrizes();

        vm.showProducts = function (cid) {
            vm.selectedCategoryId = cid;
            return CatalogService.loadProducts(cid).then(function (products) {
                vm.products = products;
            });
        };
        
        vm.showChildProducts = function (cid) {
            vm.SelectedCategoryId = cid;
            return CatalogService.loadChildProducts(cid).then(function(products){
                vm.products = products;
            });
        };

        vm.showProduct = function (index) {
            $scope.$broadcast('productPopupOpen', vm.products[index].id);
        };

        function init() {
            vm.showProducts(0).then(function() {
                vm.products = vm.prizes.concat(vm.products);
            });



            $timeout(function () {
                // init Masonry
                var $grid = $('.grid').masonry({
                    itemSelector: '.grid-item',
                    percentPosition: true,
                    columnWidth: '.grid-sizer'
                });
                // layout Isotope after each image loads
                $grid.imagesLoaded().progress(function () {
                    $grid.masonry();
                });
            }, 1000);

        }



        init();
    }
})();

/**
 * Catalog service
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('CatalogService', CatalogService);

    CatalogService.$inject = ['$http'];

    /**
     * @namespace Auth
     * @returns {Factory}
     */
    function CatalogService($http) {
        var categories = null;
        var products = null;

        var CatalogService = {
            loadCategories: loadCategories,
            loadProducts: loadProducts,
            loadChildProducts: loadChildProducts,
            loadProduct: loadProduct,
            getCategories: getCategories
        };

        function loadCategories() {
            return $http.get('/api/v1/categories/tree')
            .then(
                function (res) {
                    categories = res.data.tree;
                    //console.log(res.data);
                    return categories;

                },
                function (res) {
                    console.log('error categories list loading');
                }
            );
        }

        function loadProducts(cid) {
            return $http.get('/api/v1/categories/'+cid+'/products/')
            .then(
                function (res) {
                    products = res.data;
                    //console.log(res.data);
                    return products;
                },
                function (res) {
                    console.log('error products list loading');
                }
            );
        }
        
        function loadChildProducts(cid) {
            return $http.get('/api/v1/categories/'+cid+'/childproducts/')
            .then(
                function (res) {
                    products = res.data;
                    return products;
                },
                function (res) {
                    console.log('error products list loading');
                }
            );
        }

        function loadProduct(id) {
            return $http.get('/api/v1/prizes/' + id + '/')
            .then(
                function (res) {
                    return res.data;
                },
                function (res) {
                    console.log('error product loading');
                }
            );
        }

        function getCategories() {
            return categories;
        }

        return CatalogService;
    }
})();
/**
 * Compatition page controller
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('CompetitionController', CompetitionController);

    CompetitionController.$inject = ['$scope', '$window', '$routeParams', '$timeout', '$location', 'CompetitionService',
        'ezfb', 'Auth', 'PrizeService'];

    function CompetitionController($scope, $window, $routeParams, $timeout, $location, CompetitionService, ezfb, Auth, PrizeService) {
        //active competition
        $scope.competition = CompetitionService.getCompetition();

        //get list of available competitions
        $scope.competitionList = [];
        CompetitionService.getActiveList().then(function (data) {
            $scope.competitionList = data;
        });

        //flag for header blocks
        $scope.competitionPageFlag = true;

        //prizes
        $scope.prizes = [];
        $scope.bestPhotoPrizes = [];
        $scope.randomVotePrizes = [];

        //selected prize in product detail block
        $scope.selectedPrize = null;

        //share options
        $scope.currentUrl = $location.absUrl();
        $scope.shareName = "Prized.tv";
        $scope.shareText = "Sharing and voting for this might win me a prize this week, you can win one too if you click here.Prized.tv";
        $scope.shareCaption = "prized.tv";

        //intro for new users
        $scope.introViewed = false;

        //competition photos
        $scope.photos = [];
        //current active photo
        $scope.currentIndex = 0;

        $scope.vote = function (photoId, voteFlag) {
            //console.log(photoId, voteFlag);
            if(!Auth.isAuth()) {
                Auth.showLoginPopup();
            }
            else {
                CompetitionService.vote(photoId, $scope.competition.id, voteFlag ? 1 : 0).then(
                    function() {
                        $scope.currentIndex++;
                        if($scope.photos.length - $scope.currentIndex < 5) {
                            if (typeof $routeParams.photo_id != 'undefined') {
                                //window.location = "/#!/competition/" + $scope.competition.id;
                            }
                            else {
                                //$window.location.reload();
                            }
                        }
                        console.log($scope.photos.length - $scope.currentIndex);
                    }

                );

            }
        };

        $scope.sendAbuse = function (type) {
            var photoId = $scope.photos[$scope.currentIndex].id;
            $('#abuse-opt').modal('hide');
            CompetitionService.abuse(photoId, type).then(function () {
                $timeout(function () {
                    $scope.$parent.showInfoMessage("Message sended");
                }, 0);
            });
        };

        $scope.pinShare = function() {
            var host = "http://www.prized.tv/";
            var url = host + "/competition/" + $scope.competition.id;
            var media = $scope.photos[$scope.currentIndex].image;
            var desc = $scope.shareText;
            window.open("//www.pinterest.com/pin/create/button/" +
                "?url=" + url +
                "&media=" + media +
                "&description=" + desc, "_blank");
        };

        $scope.fbShare = function () {
            ezfb.ui(
                {
                    method: 'feed',
                    name: $scope.shareName,
                    picture: $scope.photos[$scope.currentIndex].image,
                    link: $scope.currentUrl,
                    description: $scope.shareText,
                    caption: $scope.shareCaption
                },
                function (res) {
                    if (res !== null) {
                        var photoId = $scope.photos[$scope.currentIndex].id;
                        CompetitionService.share(photoId, $scope.competition.id);
                    }
                }
            );
        };

        $scope.removeIntro = function() {
            createCookie("introViewed", true, 365);
            $scope.introViewed = true;
        };

        $scope.drag_flag = false;

        $scope.startDrag = function() {
            $scope.drag_flag = true;
            console.log('drag start');
        };

        $scope.showGifPopup = function() {
            // show tip on user click on photo
            if($scope.drag_flag == false) {
                $('#click-tip-popup').modal("show");
            }
        };

        $scope.lookAtPhotoAgain = function() {
            CompetitionService.cleanViewHistory($scope.competition.id).then(function() {
                $window.location.reload();
            });
        };

        function init() {
            //if competition not found
            if ($scope.competition === null) {
                $location.url("/");
            }

            if ($scope.competition.active_flag != true) {
                $location.url("/");
            }

            //alert ($scope.competition.end_date)
            //remove intro in viewed by user
            if(readCookie("introViewed") != null) {
                 $scope.introViewed = true;
            }

            PrizeService.getCurrentWeekList().then(function(data) {
                $scope.prizes = data;

                if (typeof $routeParams.prize_id != 'undefined') {
                    var result = $.grep($scope.prizes, function (e) {
                        return e.id == $routeParams.prize_id;
                    });

                    if (result.length == 1) {
                        $scope.selectedPrize =  result[0];
                    }
                    else {
                        $location.url("/");
                    }

                    $timeout(function () {
                        $("html, body").animate({
                            scrollTop: $(".product-details").offset().top
                        }, 1000);
                    }, 10);
                }
                else {
                    $scope.selectedPrize = CompetitionService.getFirstPrize();
                }

                //get best photo/random vote prize lists
                $scope.randomVotePrizes = $.grep($scope.prizes, function(v) {
                    return v.prize_type === "rv";
                });

                $scope.bestPhotoPrizes = $.grep($scope.prizes, function(v) {
                    return v.prize_type === "bp";
                });
            });

            var photoId = typeof $routeParams.photo_id != 'undefined'?$routeParams.photo_id:0;
            CompetitionService.loadPhotos($scope.competition.id, photoId).then(function () {
                $scope.photos = CompetitionService.getPhotos();
            });

            window.twttr.ready(function(twttr) {
                // Now bind our custom intent events
                window.twttr.events.bind('tweet', function(e) {
                    var photoId = $scope.photos[$scope.currentIndex].id;
                    CompetitionService.share(photoId, $scope.competition.id);
                });
            });

            $timeout(function () {

                $('.dress-cover-box .gallery-main').flickity();
                // 2nd gallery, navigation
                $('.dress-cover-box .gallery-nav').flickity({
                    asNavFor: '.gallery-main',
                    contain: true,
                    pageDots: false
                });

                $(".compet-carousel li, .pr-carousel li, .play-stop-rocket ul li").on('click', function() {
                    $("html, body").animate({
                        scrollTop: $('#product_view').offset().top
                    }, 1000);
                });

                $(".term").on('click', function() {
                    $("html, body").animate({
                        scrollTop: $('#footer').offset().top
                    }, 1000);
                });
                $(window).scroll(function() {
                    if ($(document).scrollTop() < 100) {
                        $(".top-site").fadeOut('slow');
                    } else {

                        $(".top-site").fadeIn('slow');

                    }
                });

                $(".top-site i").on('click', function () {
                    $("html, body").animate({
                        scrollTop: 0
                    }, 1000);
                });

                $('.captions').flowtype();

                /* scroll on click end */
                Main_Menu();

                $('.nav-mob').click(function (e) {
                    $('.nav-menu').slideToggle('slow');
                });

                album_menu();
                $('.btn-alb-mob-filt').click(function (e) {
                    $('body').toggleClass('mob-pdl200');
                    $('.alb-list-mob').toggleClass('active');
                    $('.mob-pdl200').css('width', Win_w);
                    e.stopPropagation();
                });

                //Album_select();

                //Album_Image_selct();

                //Dropdown1();
                //Color_Choose();
                //Size_Choose();

                //Detail_Accordion();

            }, 1000);
        }

        init();
    }

    angular.module('mainApp')
        .directive('voteCarousel', function () {

            var elastic = null;

            return function (scope, element, attrs) {
                if (scope.$last) {
                    new ElastiStack(document.getElementById('elasticstack'));
                }
        };
    })

})();

/**
 * Competition service
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .service('CompetitionService', CompetitionService);

    CompetitionService.$inject = ['$http'];

    function CompetitionService($http) {
        var competition = null;
        var competition_list = null;
        var prizes = null;
        var photos = null;

        function getActiveList() {
            return $http.get('/api/v1/competitions?active_flag=True&page_size=3')
            .then(
                function (res) {

                    competition_list = res.data.results;
                    console.log(res, competition_list);
                    return competition_list;
                },
                function (res) {
                    console.log('error competition list loading');
                }
            );
        }

        function getFinishedList() {
            return $http.get('/api/v1/competitions?end_flag=True')
            .then(
                function (res) {
                    competition_list = res.data;
                    console.log(res.data);
                    return competition_list;
                },
                function (res) {
                    console.log('error competition list loading');
                }
            );
        }

        function getActive() {
            return $http.get('/api/v1/competitions/top')
            .then(
                function (res) {
                    competition = res.data
                    prizes = res.data.prizes;
                },
                function (res) {
                    console.log('error competition loading');
                }
            );
        }

        function getById(id) {
            return $http.get('/api/v1/competitions/' + id)
            .then(
                function (res) {
                    competition = res.data
                    prizes = res.data.prizes;
                },
                function (res) {

                    console.log('error competition loading');
                }
            );
        }

        function loadPhotos(competitionId, photoId) {
            var photoUrl = '/api/v1/photos?competition_id='+competitionId + '&photo_id=' + photoId;

            return $http.get(photoUrl, {cache: false})
                .then(function (res) {
                    photos = res.data.results;
                    return photos;
                },
                function (res) {
                    console.log(res, 'error photo loading');
                });
        }

        function setFirstPhoto(photoId) {
            var index = photos.map(function(x) {return x.id; }).indexOf(parseInt(photoId));
            if(index > -1) {
                var temp = photos[0];
                photos[0] = photos[index];
                photos[index] = temp;
            }
        }

        function getPrizeById(prizeId) {
            if (prizes == null) return null;
            
            var result = $.grep(prizes, function (e) {
                return e.id == prizeId;
            });

            if (result.length == 1) {
                return result[0];
            }
            else {
                return null;
            }
        }

        function getFirstPrize() {
            if (prizes != null) return prizes[0];
            else return null;
        }

        function vote(photoId, competitionId, score) {
            return $http.get('/photo/vote?photoId=' + photoId + '&competitionId=' + competitionId + '&score=' + score);
        }

        function share(photoId, competitionId) {
            return $http.get('/photo/share?photoId=' + photoId + '&competitionId=' + competitionId);
        }

        function abuse(photoId, type) {
            return $http.get('/api/v1/photos/' + photoId + '/abuse?type=' + type)
                .then(
                function (res) {

                },
                function (res) {

                }
            );
        }

        function cleanViewHistory(competitionId) {
            return $http.get('/api/v1/competitions/' + competitionId + '/clean_view_history/');
        }

        return {
            //promise: promise,
            getActiveList: getActiveList,
            getById: getById,
            loadPhotos: loadPhotos,
            getPrizes: function () {
                return prizes;
            },
            getPhotos: function () {
                return photos;
            },
            getCompetition: function () {
                return competition
            },
            getActive: getActive,
            getPrizeById: getPrizeById,
            getFirstPrize: getFirstPrize,
            vote: vote,
            share: share,
            abuse: abuse,
            setFirstPhoto: setFirstPhoto,
            getFinishedList: getFinishedList,
            cleanViewHistory: cleanViewHistory
        };
    }

})();

/**
 * Prize detail controller
 * for prize block on competition page and prize popup on catalog page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('PrizeDetailController', PrizeDetailController);

    PrizeDetailController.$inject = ['$scope', '$routeParams', '$cookies', '$location', '$timeout', 'ngCart', 'CatalogService', 'ezfb'];

    function PrizeDetailController($scope, $routeParams, $cookies, $location, $timeout, ngCart, CatalogService, ezfb) {
        //var pd = this;
        $scope.color = null;
        $scope.colorCode = null;
        $scope.size = null;
        $scope.photoCount = 0;

        $scope.currentUrl = $location.absUrl();
        $scope.shareName = "Prized.tv";
        $scope.shareText = "Win this on prized.tv";
        $scope.shareCaption = "prized.tv";

        $scope.showPrice = true;

        $scope.selectColor = function(color, colorCode) {
            $scope.color = color;
            $scope.colorCode = colorCode;

        };

        $scope.selectSize = function(size) {
            $scope.size = size;
            console.log(size);
        };

        $scope.addToCart = function (prize) {
            if (prize !== null) {

                if($scope.color == null) {
                    $scope.color = prize.colors[0].name;
                }

                if(prize.sizes.length ==  1) {
                    $scope.size = prize.sizes[0];
                }

                if($scope.size  == null) {
                    $scope.showInfoMessage("Please, select your size to continue");
                    return false;
                }

                var item = ngCart.getItemById(prize.id);

                var quantity = 1;
                if (item) {
                    quantity = item.getQuantity() + 1
                }

                console.log(prize.id);

                ngCart.addItem(prize.id,
                    prize.name,
                    prize.sale_price,
                    quantity,
                    {
                        'image': prize.thumbnail,
                        'size': $scope.size,
                        'color': $scope.color
                    });
                // Add to Bag Popup Start

                $("#success").modal('show');
            }
            else {
                //TODO: show error (no product selected)
            }

        };

        $scope.fbShare = function () {
            ezfb.ui(
                {
                    method: 'feed',
                    name: $scope.shareName,
                    picture: $scope.selectedPrize.photos[0].image,
                    link: $scope.currentUrl,
                    description: $scope.shareText,
                    caption: $scope.shareCaption
                },
                function (res) {
                }
            );
        };

        function init() {
            if (typeof $routeParams.prize_id == 'undefined') {
                return $location.url("/");
            }

            var id = $routeParams.prize_id;

            console.log(id);
            $scope.color = null;
            $scope.colorCode = null;
            $scope.size = null;

            CatalogService.loadProduct(id).then(function(product) {
                //$('#spinner-mod').modal('hide');

                $scope.selectedPrize = product;

                $timeout(function () {
                    $('.slider-for').slick({
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        arrows: false,
                        fade: true,
                        asNavFor: '.slider-nav',
                        adaptiveHeight: true
                    });
                    $('.slider-nav').slick({
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        asNavFor: '.slider-for',
                        dots: false,
                        centerMode: false,
                        focusOnSelect: true
                    });

                    //$('#product-detail').on('shown.bs.modal', function (e) {
                    //    $('.slider-for, .slider-nav').slick("setPosition", 0);
                    //});

                    Dropdown1();
                    //Color_Choose();
                    //Size_Choose();
                    Detail_Accordion();

                }, 1000);
            });

        }

        init();
    }




})();
/**
 * Controller for prize list on first page and competition page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('PrizeController', PrizeController);

    PrizeController.$inject = ['$scope', 'CompetitionService', 'PrizeService'];

    function PrizeController($scope, CompetitionService, PrizeService) {
        $scope.competition = CompetitionService.getCompetition();
        $scope.prizes = [];
        $scope.showPrice = true;
        $scope.detailLink = "/#!/prize/";

        $scope.getPrizes = function () {
            return $scope.prizes; //PrizeService.getCurrentWeekList();
        };

        function init() {
            PrizeService.getCurrentWeekList().then(function(data) {
                $scope.prizes = data;
            })
        }

        init();
    }
})();
/**
 * Index controller for main page *
 *
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('IndexController', IndexController);

    IndexController.$inject = ['$scope', '$timeout', 'CompetitionService',];

    function IndexController($scope, $timeout, CompetitionService) {
        //get current active competition
        $scope.competition = CompetitionService.getCompetition();
        $scope.competitionList = null;

        loadCompetitionList();

        function loadCompetitionList() {
            return CompetitionService.getActiveList().then(function (data) {
                $scope.competitionList = data;

                $timeout(function () {
                    $('.captions').flowtype();

                }, 100);
            });
        }

        function showWelcomeVideoOnLoad() {
            if(readCookie("welcomeVideoViewed") == null) {
                $scope.showWelcomeVideoPopup();
                createCookie("welcomeVideoViewed", true, 365);
            }

            //$("#registration-popup").modal("show");
        }

        showWelcomeVideoOnLoad();
    }
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('CartController', CartController);

    CartController.$inject = ['$scope', '$location', '$cookies', 'ngCart', 'CompetitionService'];

    /**
     * Controller for cart page
     *
     * @param $scope
     * @param $location
     * @param $cookies
     * @param ngCart
     * @param CompetitionService
     * @constructor
     */
    function CartController($scope, $location, $cookies, ngCart, CompetitionService) {
        var vm = this;
        vm.ngCart = ngCart;
        vm.competition = CompetitionService.getCompetition();
        vm.items = ngCart.getItems();
        $scope.hideCartFlag = true;

        vm.goToPaypalStart = function() {
            var cart = ngCart.getCart();
            var jsonCart = JSON.stringify(cart);

            $cookies.cart = jsonCart;

            window.location = "/order/paypal/start";

            //$location.path = "/order/paypal/start";
        }

        vm.goToCheckout = function() {
            $location.url("/order/checkout");
        }

        vm.decreaseQuantity = function(item) {
            item.setQuantity(-1, true);
        }
    }
})();
/**
 * Checkout controller for order checkout page
 *
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('CheckoutOrderController', CheckoutOrderController);

    CheckoutOrderController.$inject = ['$scope', '$location', '$cookies', '$cookieStore', '$timeout', 'ngCart', 'OrderService'];

    function CheckoutOrderController($scope, $location, $cookies, $cookieStore, $timeout, ngCart, OrderService) {
        var vm = this;
        vm.countries = country_codes;
        vm.cardyears = [];
        vm.order = {};

        vm.goToConfirm = function() {
            console.log(vm.order);
            console.log($('#b_country').val());

            if($('#b_country').val() !== null)  {
                vm.order.b_countrycode = vm.countries[$('#b_country').val()].code;
                vm.order.b_countryname = vm.countries[$('#b_country').val()].name;
            }
            //$cookies.order_type = "direct";

            vm.confirmDirectOrder(vm.order);

            //$location.url("/order/confirm");
            //console.log(vm.order.first_name);
        };

        vm.confirmDirectOrder = function(order) {
            //console.log(vm.order.token);
            var cart = ngCart.getCart();
            $cookies.cart = JSON.stringify(cart);

            OrderService.confirmDirectCheckout(order).then(function(data) {
                console.log(data.data.order_id);
                vm.order.id = data.data.order_id;
                //$cookies.order = vm.order;

                $location.url("/order/tnx");
            });
        };

        vm.cancelOrder = function() {
            $cookieStore.remove('order');
            $location.url("/cart");
        };

        vm.next = function() {
            console.log($scope.billingForm.$valid);
        };

        function init() {
            var startYear = new Date().getFullYear();
            var endYear = startYear + 10;
            while ( startYear <= endYear ) {
                    vm.cardyears.push(startYear++);
            }

            $timeout(function () {
                $('#rootwizard').bootstrapWizard({
                    'tabClass': 'nav nav-tabs',
                    onNext: function(tab, navigation, index) {
                        //alert(index);
                        if(index == 1)
                        {
                            //alert(index);
                            if($scope.billingForm.$valid) {
                                return true;
                            }
                            $timeout(function(){

                                $scope.billingForm.$setSubmitted();

                            },10);
                            return false;
                            /*
                            return $scope.billingForm.$setSubmitted().then(function(){
                                return $scope.billingForm.$valid;
                            });
                            */
                        }
                        else if(index == 2) {
                            if($scope.paymentForm.$valid) {
                                return true;
                            }
                            $timeout(function(){

                                $scope.paymentForm.$setSubmitted();

                            },10);
                            return false;
                        } else return true;
                    },
                    onTabClick: function(tab, navigation, index) {
                        //console.log(tab, navigation, index);
                        return false;
                    },
                    onTabShow: function(tab, navigation, index) {
                        var $total = navigation.find('li').length;
                        var $current = index+1;

                        // If it's the last tab then hide the last button and show the finish instead
                        if($current >= $total) {
                            $('#rootwizard').find('.pager .next').hide();
                            $('#rootwizard').find('.pager .finish').show();
                        } else {
                            $('#rootwizard').find('.pager .next').show();
                            $('#rootwizard').find('.pager .finish').hide();
                        }
                    }
                });
                window.prettyPrint && prettyPrint();

                [].slice.call( document.querySelectorAll( 'select.cs-select' ) ).forEach( function(el) {
					new SelectFx(el, {
                      onChange: function(val) {
                        vm.order[el.name] = val;
                      }
                    });
				} );

                $('#check-me').change(function(){
                  if($(this).prop("checked")) {
                    $('#billing-form').hide();
                    $('.empty-space400').show();
                  } else {
                    $('#billing-form').show();
                    $('.empty-space400').hide();
                  }
                });
            }, 10);
        }

        init();
    }

})();


var country_codes = [
    {code: "AF", name: "Afghanistan"},
    {code: "AX", name: "Aland Islands"},
    {code: "AL", name: "Albania"},
    {code: "DZ", name: "Algeria"},
    {code: "AS", name: "American Samoa"},
    {code: "AD", name: "Andorra"},
    {code: "AO", name: "Angola"},
    {code: "AI", name: "Anguilla"},
    {code: "AQ", name: "Antarctica"},
    {code: "AG", name: "Antigua and Barbuda"},
    {code: "AR", name: "Argentina"},
    {code: "AM", name: "Armenia"},
    {code: "AW", name: "Aruba"},
    {code: "AU", name: "Australia"},
    {code: "AT", name: "Austria"},
    {code: "AZ", name: "Azerbaijan"},
    {code: "BS", name: "Bahamas"},
    {code: "BH", name: "Bahrain"},
    {code: "BD", name: "Bangladesh"},
    {code: "BB", name: "Barbados"},
    {code: "BY", name: "Belarus"},
    {code: "BE", name: "Belgium"},
    {code: "BZ", name: "Belize"},
    {code: "BJ", name: "Benin"},
    {code: "BM", name: "Bermuda"},
    {code: "BT", name: "Bhutan"},
    {code: "BO", name: "Bolivia"},
    {code: "BA", name: "Bosnia and Herzegovina"},
    {code: "BW", name: "Botswana"},
    {code: "BV", name: "Bouvet Island"},
    {code: "BR", name: "Brazil"},
    {code: "IO", name: "British Indian Ocean Territory"},
    {code: "BN", name: "Brunei Darussalam"},
    {code: "BG", name: "Bulgaria"},
    {code: "BF", name: "Burkina Faso"},
    {code: "BI", name: "Burundi"},
    {code: "KH", name: "Cambodia"},
    {code: "CM", name: "Cameroon"},
    {code: "CA", name: "Canada"},
    {code: "CV", name: "Cape Verde"},
    {code: "KY", name: "Cayman Islands"},
    {code: "CF", name: "Central African Republic"},
    {code: "TD", name: "Chad"},
    {code: "CL", name: "Chile"},
    {code: "CN", name: "China"},
    {code: "CX", name: "Christmas Island"},
    {code: "CC", name: "Cocos (Keeling) Islands"},
    {code: "CO", name: "Colombia"},
    {code: "KM", name: "Comoros"},
    {code: "CG", name: "Congo"},
    {code: "CD", name: "Congo, The Democratic Republic of the"},
    {code: "CK", name: "Cook Islands"},
    {code: "CR", name: "Costa Rica"},
    {code: "CI", name: "Côte d'Ivoire"},
    {code: "HR", name: "Croatia"},
    {code: "CU", name: "Cuba"},
    {code: "CY", name: "Cyprus"},
    {code: "CZ", name: "Czech Republic"},
    {code: "DK", name: "Denmark"},
    {code: "DJ", name: "Djibouti"},
    {code: "DM", name: "Dominica"},
    {code: "DO", name: "Dominican Republic"},
    {code: "EC", name: "Ecuador"},
    {code: "EG", name: "Egypt"},
    {code: "SV", name: "El Salvador"},
    {code: "GQ", name: "Equatorial Guinea"},
    {code: "ER", name: "Eritrea"},
    {code: "EE", name: "Estonia"},
    {code: "ET", name: "Ethiopia"},
    {code: "FK", name: "Falkland Islands (Malvinas)"},
    {code: "FO", name: "Faroe Islands"},
    {code: "FJ", name: "Fiji"},
    {code: "FI", name: "Finland"},
    {code: "FR", name: "France"},
    {code: "GF", name: "French Guiana"},
    {code: "PF", name: "French Polynesia"},
    {code: "TF", name: "French Southern Territories"},
    {code: "GA", name: "Gabon"},
    {code: "GM", name: "Gambia"},
    {code: "GE", name: "Georgia"},
    {code: "DE", name: "Germany"},
    {code: "GH", name: "Ghana"},
    {code: "GI", name: "Gibraltar"},
    {code: "GR", name: "Greece"},
    {code: "GL", name: "Greenland"},
    {code: "GD", name: "Grenada"},
    {code: "GP", name: "Guadeloupe"},
    {code: "GU", name: "Guam"},
    {code: "GT", name: "Guatemala"},
    {code: "GG", name: "Guernsey"},
    {code: "GN", name: "Guinea"},
    {code: "GW", name: "Guinea-Bissau"},
    {code: "GY", name: "Guyana"},
    {code: "HT", name: "Haiti"},
    {code: "HM", name: "Heard Island and McDonald Islands"},
    {code: "VA", name: "Holy See (Vatican City State)"},
    {code: "HN", name: "Honduras"},
    {code: "HK", name: "Hong Kong"},
    {code: "HU", name: "Hungary"},
    {code: "IS", name: "Iceland"},
    {code: "IN", name: "India"},
    {code: "ID", name: "Indonesia"},
    {code: "IR", name: "Iran, Islamic Republic of"},
    {code: "IQ", name: "Iraq"},
    {code: "IE", name: "Ireland"},
    {code: "IM", name: "Isle of Man"},
    {code: "IL", name: "Israel"},
    {code: "IT", name: "Italy"},
    {code: "JM", name: "Jamaica"},
    {code: "JP", name: "Japan"},
    {code: "JE", name: "Jersey"},
    {code: "JO", name: "Jordan"},
    {code: "KZ", name: "Kazakhstan"},
    {code: "KE", name: "Kenya"},
    {code: "KI", name: "Kiribati"},
    {code: "KP", name: "Korea, Democratic People's Republic of"},
    {code: "KR", name: "Korea, Republic of"},
    {code: "KW", name: "Kuwait"},
    {code: "KG", name: "Kyrgyzstan"},
    {code: "LA", name: "Lao People's Democratic Republic"},
    {code: "LV", name: "Latvia"},
    {code: "LB", name: "Lebanon"},
    {code: "LS", name: "Lesotho"},
    {code: "LR", name: "Liberia"},
    {code: "LY", name: "Libyan Arab Jamahiriya"},
    {code: "LI", name: "Liechtenstein"},
    {code: "LT", name: "Lithuania"},
    {code: "LU", name: "Luxembourg"},
    {code: "MO", name: "Macao"},
    {code: "MK", name: "Macedonia, The Former Yugoslav Republic of"},
    {code: "MG", name: "Madagascar"},
    {code: "MW", name: "Malawi"},
    {code: "MY", name: "Malaysia"},
    {code: "MV", name: "Maldives"},
    {code: "ML", name: "Mali"},
    {code: "MT", name: "Malta"},
    {code: "MH", name: "Marshall Islands"},
    {code: "MQ", name: "Martinique"},
    {code: "MR", name: "Mauritania"},
    {code: "MU", name: "Mauritius"},
    {code: "YT", name: "Mayotte"},
    {code: "MX", name: "Mexico"},
    {code: "FM", name: "Micronesia, Federated States of"},
    {code: "MD", name: "Moldova"},
    {code: "MC", name: "Monaco"},
    {code: "MN", name: "Mongolia"},
    {code: "ME", name: "Montenegro"},
    {code: "MS", name: "Montserrat"},
    {code: "MA", name: "Morocco"},
    {code: "MZ", name: "Mozambique"},
    {code: "MM", name: "Myanmar"},
    {code: "NA", name: "Namibia"},
    {code: "NR", name: "Nauru"},
    {code: "NP", name: "Nepal"},
    {code: "NL", name: "Netherlands"},
    {code: "AN", name: "Netherlands Antilles"},
    {code: "NC", name: "New Caledonia"},
    {code: "NZ", name: "New Zealand"},
    {code: "NI", name: "Nicaragua"},
    {code: "NE", name: "Niger"},
    {code: "NG", name: "Nigeria"},
    {code: "NU", name: "Niue"},
    {code: "NF", name: "Norfolk Island"},
    {code: "MP", name: "Northern Mariana Islands"},
    {code: "NO", name: "Norway"},
    {code: "OM", name: "Oman"},
    {code: "PK", name: "Pakistan"},
    {code: "PW", name: "Palau"},
    {code: "PS", name: "Palestinian Territory, Occupied"},
    {code: "PA", name: "Panama"},
    {code: "PG", name: "Papua New Guinea"},
    {code: "PY", name: "Paraguay"},
    {code: "PE", name: "Peru"},
    {code: "PH", name: "Philippines"},
    {code: "PN", name: "Pitcairn"},
    {code: "PL", name: "Poland"},
    {code: "PT", name: "Portugal"},
    {code: "PR", name: "Puerto Rico"},
    {code: "QA", name: "Qatar"},
    {code: "RE", name: "Réunion"},
    {code: "RO", name: "Romania"},
    {code: "RU", name: "Russian Federation"},
    {code: "RW", name: "Rwanda"},
    {code: "BL", name: "Saint Barthélemy"},
    {code: "SH", name: "Saint Helena"},
    {code: "KN", name: "Saint Kitts and Nevis"},
    {code: "LC", name: "Saint Lucia"},
    {code: "MF", name: "Saint Martin"},
    {code: "PM", name: "Saint Pierre and Miquelon"},
    {code: "VC", name: "Saint Vincent and the Grenadines"},
    {code: "WS", name: "Samoa"},
    {code: "SM", name: "San Marino"},
    {code: "ST", name: "Sao Tome and Principe"},
    {code: "SA", name: "Saudi Arabia"},
    {code: "SN", name: "Senegal"},
    {code: "RS", name: "Serbia"},
    {code: "SC", name: "Seychelles"},
    {code: "SL", name: "Sierra Leone"},
    {code: "SG", name: "Singapore"},
    {code: "SK", name: "Slovakia"},
    {code: "SI", name: "Slovenia"},
    {code: "SB", name: "Solomon Islands"},
    {code: "SO", name: "Somalia"},
    {code: "ZA", name: "South Africa"},
    {code: "GS", name: "South Georgia and the South Sandwich Islands"},
    {code: "ES", name: "Spain"},
    {code: "LK", name: "Sri Lanka"},
    {code: "SD", name: "Sudan"},
    {code: "SR", name: "Suriname"},
    {code: "SJ", name: "Svalbard and Jan Mayen"},
    {code: "SZ", name: "Swaziland"},
    {code: "SE", name: "Sweden"},
    {code: "CH", name: "Switzerland"},
    {code: "SY", name: "Syrian Arab Republic"},
    {code: "TW", name: "Taiwan, Province of China"},
    {code: "TJ", name: "Tajikistan"},
    {code: "TZ", name: "Tanzania, United Republic of"},
    {code: "TH", name: "Thailand"},
    {code: "TL", name: "Timor-Leste"},
    {code: "TG", name: "Togo"},
    {code: "TK", name: "Tokelau"},
    {code: "TO", name: "Tonga"},
    {code: "TT", name: "Trinidad and Tobago"},
    {code: "TN", name: "Tunisia"},
    {code: "TR", name: "Turkey"},
    {code: "TM", name: "Turkmenistan"},
    {code: "TC", name: "Turks and Caicos Islands"},
    {code: "TV", name: "Tuvalu"},
    {code: "UG", name: "Uganda"},
    {code: "UA", name: "Ukraine"},
    {code: "AE", name: "United Arab Emirates"},
    {code: "GB", name: "United Kingdom"},
    {code: "US", name: "United States"},
    {code: "UM", name: "United States Minor Outlying Islands"},
    {code: "UY", name: "Uruguay"},
    {code: "UZ", name: "Uzbekistan"},
    {code: "VU", name: "Vanuatu"},
    {code: "VE", name: "Venezuela"},
    {code: "VN", name: "Viet Nam"},
    {code: "VG", name: "Virgin Islands, British"},
    {code: "VI", name: "Virgin Islands, U.S."},
    {code: "WF", name: "Wallis and Futuna"},
    {code: "EH", name: "Western Sahara"},
    {code: "YE", name: "Yemen"},
    {code: "ZM", name: "Zambia"},
    {code: "ZW", name: "Zimbabwe"}
];
/**
 * Order controller
 * Order Review and confirmation page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('ConfirmOrderController', ConfirmOrderController)
        .controller('TnxOrderController', TnxOrderController);

    ConfirmOrderController.$inject = ['$scope', '$http', '$location', '$cookies', '$cookieStore', 'ngCart', 'OrderService'];

    function ConfirmOrderController($scope, $http, $location, $cookies, $cookieStore, ngCart, OrderService) {
        var vm = this;
        vm.ngCart = ngCart;
        vm.items = ngCart.getItems();
        vm.order_type = null;
        vm.order = null;

        function init() {
            var order_type = $cookies.order_type;
            console.log(order_type);

            if(order_type == "express") {
                var order = $cookies.order;
                order = order.replace(/\\054/g, ",");
                try {
                    vm.order = JSON.parse(JSON.parse(order));
                }
                catch(e) {
                    vm.order = {};
                }
            }

            if(order_type === "direct") {
                var order = globalOrder;
                console.log(order);
                vm.order = order;
            }

            if(typeof order == "undefined" || typeof order_type == "undefined") {
                //$location.url('/cart');
            }
            vm.order_type = order_type;
        }

        init();

        vm.confirmOrder = function() {
            if(vm.order_type == "direct") {
                vm.confirmDirectOrder();
            }
            else {
                vm.confirmExpressOrder();
            }
        };

        vm.confirmExpressOrder = function() {
            OrderService.confirmExpressCheckout(vm.order).then(function(data) {
                vm.order.id = data.data.order_id;
                $cookies.order = vm.order;
                $location.path("/order/tnx");
            });

        };

        vm.confirmDirectOrder = function() {
            var cart = ngCart.getCart();
            $cookies.cart = JSON.stringify(cart);

            OrderService.confirmDirectCheckout(vm.order).then(function(data) {
                console.log(data.data.order_id);
                vm.order.id = data.data.order_id;
                $cookies.order = vm.order;
            });
        };

        vm.cancelOrder = function() {
            $cookieStore.remove('order');
            $cookieStore.remove('order_type');
            $location.url("/cart");
          }
    }

    TnxOrderController.$inject = ['$scope', 'ngCart'];

    function TnxOrderController($scope, ngCart) {
        var vm = this;

        function init(){
            ngCart.empty(true);
            $scope.cartItemCount = 0;
        }

        init();
    }
})();
/**
 * Order Service. Confirmation functions
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .service('OrderService', OrderService);

    OrderService.$inject = ['$http'];

    function OrderService($http) {

        function confirmExpressCheckout(order) {
            console.log ("In ConfirmExpressCheckout: Token:  " + order.token);
            return $http({
                method: 'GET',
                url: '/order/paypal/end'+"?token="+order.token,
                data: "token=" + order.token,
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            }).then(
                function(data){
                    if(typeof data.data.error != "undefined") {
                        console.log(data.data.error);
                        }
                    return data;
                    },
                function(data) {});
            }

        function confirmDirectCheckout(order) {
            var order_str = JSON.stringify(order);

            return $http({
                method: 'GET',
                url: '/order/save'+"?order=" + order_str,
                data: "order=" + order_str,
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            }).then(
                function(data){

                    if(typeof data.data.error != "undefined") {
                        console.log(data.data.error);
                        }
                    return data;
                    },function(data) {});
            }
        return {
            confirmExpressCheckout: confirmExpressCheckout,
            confirmDirectCheckout: confirmDirectCheckout
        }

    }
})();
/**
 * Controller for selecting photo from Facebook
 * @param $scope
 * @param $http
 * @param $timeout
 * @param ezfb
 * @param PhotoService
 * @param Auth
 * @constructor
 */
function FacebookSelectPhotoController($scope, $http, $timeout, $routeParams, ezfb, PhotoService, Auth, PhotoUploadFactory) {

    $scope.albums = PhotoService.getAlbums();
    $scope.photos = [];
    $scope.selectedAlbum = 0;
    $scope.selectedPhoto = null;
    $scope.showAlbums = true;
    $scope.competitionId = 0;

    $scope.showPhotoList = function(albumIndex){
        $scope.selectedAlbum = albumIndex;

        if($scope.albums[albumIndex] != 'undefined')
        {
            albumId = $scope.albums[albumIndex].id

            ezfb.api('/' + albumId + '/photos?fields=picture,source', function(res)
            {
                $scope.photos = res.data;
                console.log(res.data)
            });
        }

    };

    $scope.selectPhoto = function(index){
        $scope.selectedPhoto = $scope.photos[index];
        $scope.uploadPhoto();
    };

    $scope.uploadPhoto = function() {
        if($scope.selectedPhoto != null)
        {
            $scope.$parent.myImage = $scope.selectedPhoto.source;
            $scope.showCropImagePopup($scope.competitionId);
        }
        else {
            $scope.$parent.showInfoMessage("Please, select photo first");
        }

    };

    var init = function() {
        if (typeof $routeParams.competition_id != 'undefined') {
            $scope.competitionId = $routeParams.competition_id;
        }

        ezfb.getLoginStatus().then(function(res) {
            if(res.status !== "connected") {
                window.location = "#!/";
            }
            else {
                $scope.showPhotoList(0);
            }

        });

        //var uploader = PhotoUploadFactory.build('test');
        //console.log(uploader.getName());
    };

    (function() {  // init
        $timeout( function() {
            album_menu();
            $('.btn-alb-mob-filt').click(function(e) {
                $('body').toggleClass('mob-pdl200');
                $('.alb-list-mob').toggleClass('active');
                $('.mob-pdl200').css('width',Win_w);
                e.stopPropagation();
            });
        }, 10);
    })();

    init();
}

/**
 * Selecting photo from Instagram
 *
 * @param $scope
 * @param $http
 * @param Auth
 * @constructor
 */
function InstagramSelectPhotoController($scope, $http, $routeParams, Auth) {
    $scope.photos = [];
    $scope.selectedPhoto = null;
    $scope.showAlbums = false;
    $scope.competitionId = 0;

    $scope.showPhotoList = function() {

        $http.jsonp('https://api.instagram.com/v1/users/'+ Auth.getSocialUserId()
                +'/media/recent/?access_token=' + Auth.getAccessToken() + '&callback=JSON_CALLBACK').then(
            function(res) {
                res.data.data.forEach(function(current) {
                    $scope.photos.push({
                        picture: current.images.thumbnail.url,
                        id: current.id,
                        source: current.images.standard_resolution.url
                    })
                });

            },
            function(error) {
                console.log(error);
            }

        );

    };

    $scope.selectPhoto = function(index){
        if($scope.selectedPhoto != null && $scope.selectedPhoto.id == $scope.photos[index].id){
            $scope.selectedPhoto = null;
        }
        else{
            $scope.selectedPhoto = $scope.photos[index];
        }
        $scope.uploadPhoto();
    };

    $scope.uploadPhoto = function(){
        if($scope.selectedPhoto != null)
        {
            $('#spinner-mod').modal('show');
            $http({
                method: 'POST',
                url: '/upload_photo_by_url/',
                data: $.param(
                    {
                        'photo_url': $scope.selectedPhoto.source,
                        'competition_id': $scope.competitionId
                    }),
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            }).
              success(function(data, status, headers, config) {
                // this callback will be called asynchronously
                // when the response is available
                    //console.log(data.photo_id)
                    $('#spinner-mod').modal('hide');
                    window.location = "#!/competition/" + data.competition_id + "/photo/" + data.photo_id
              }).
              error(function(data, status, headers, config) {
                // called asynchronously if an error occurs
                // or server returns response with an error status.
                    //alert('error: ' + status);
                    $('#spinner-mod').modal('hide');
                    $scope.$parent.showInfoMessage("Error while photo upload, try again");
                    //console.log("Error photo upload");
              });
        }
    };

    var init = function() {
        if (typeof $routeParams.competition_id != 'undefined') {
            $scope.competitionId = $routeParams.competition_id;
        }

        if(Auth.getAccessToken() == "")
        {
            Auth.loadAccessToken().then(function() {
                $scope.showPhotoList();
            })
        }
        else {
            $scope.showPhotoList();
        }
    };

    init();
}

angular.module('mainApp')
.controller('FacebookSelectPhotoController',
        ['$scope', '$http', '$timeout', '$routeParams', 'ezfb', 'PhotoService', 'Auth', 'PhotoUploadFactory',
            FacebookSelectPhotoController])
.controller('InstagramSelectPhotoController',
        ['$scope', '$http', '$routeParams', 'Auth', InstagramSelectPhotoController]);

/**
 * Load Albums from Facebook for select photo page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .service('PhotoService', PhotoService);

    PhotoService.$inject = ['ezfb'];

    function PhotoService(ezfb) {
        var albums = null;

        var promise = ezfb.getLoginStatus()
            .then(function (res) {
                return ezfb.api('/me/albums');
            })
            .then(function (res) {
                albums = res.data;
            });

        return {
            promise: promise,
            getAlbums: function () {
                return albums;
            }
        };
    }

})();
/**
 * Load Albums from Facebook for select photo page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .service('PhotoUploadFactory', PhotoUploadFactory);

    PhotoUploadFactory.$inject = [];

    function PhotoUploadFactory() {
        function Uploader(name) {
            this.name = name;
        }

        Uploader.prototype.getName = function() {
            return this.name;
        };

        Uploader.build = function (name) {
            return new Uploader(
                name
            );
        };

        return Uploader;
    }

})();
/**
 * Prize service
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .service('PrizeService', PrizeService);

    PrizeService.$inject = ['$http'];

    function PrizeService($http) {
        var prizes = null;

        function getCurrentWeekList() {
            return $http.get('/api/v1/prizegroup/?group__code=current')
            .then(
                function (res) {
                    prizes = res.data;
                    //console.log(prizes);
                    return prizes;
                },
                function () {
                    console.log('error prizes list loading');
                }
            );
        }

        function getWinner(code) {
            return $http.get('/api/v1/winner/?code='+code)
            .then(
                function (res) {
                    var winner = res.data;
                    console.log(winner);

                    if(winner.length == 1) {
                        return winner[0];
                    }
                    //console.log(prizes);
                    return null;
                },
                function () {
                    console.log('error prizes list loading');
                }
            );
        }

        function getWinnerList(code) {
            return $http.get('/api/v1/prizegroup/winner/?code='+code)
            .then(
                function (res) {
                    prizes = res.data;
                    //console.log(prizes);
                    return prizes;
                },
                function () {
                    console.log('error prizes list loading');
                }
            );
        }

        function sendWinnerPrizeConfirmation(confirmation) {
            return $http({
                    method: 'POST',
                    url: '/api/v1/winner/confirm',
                    data: $.param(confirmation),
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}
                });
        }

        return {
            getCurrentWeekList: getCurrentWeekList,
            getPrizes: function () {
                return prizes;
            },
            getWinnerList: getWinnerList,
            getWinner: getWinner,
            sendWinnerPrizeConfirmation: sendWinnerPrizeConfirmation
        };
    }

})();

/**
 * Checkout controller for order checkout page
 *
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('WinnerConfirmController', WinnerConfirmController);

    WinnerConfirmController.$inject = ['$scope', '$location', '$cookies', '$cookieStore', '$timeout', 'PrizeService'];

    function WinnerConfirmController($scope, $location, $cookies, $cookieStore, $timeout, PrizeService) {
        var vm = this;
        vm.countries = country_codes;
        vm.order = {};

        vm.goToConfirm = function() {
            console.log(vm.order);
            console.log($('#country').val());

            if($('#country').val() !== null)  {
                vm.order.country_code = vm.countries[$('#country').val()].code;
                vm.order.country_name = vm.countries[$('#country').val()].name;
            }
            //$cookies.order_type = "direct";

            vm.confirmDirectOrder(vm.order);

            //$location.url("/order/confirm");
            //console.log(vm.order.first_name);
        };

        vm.confirmDirectOrder = function(order) {
            //console.log(vm.order.token);
            //var cart = ngCart.getCart();
            //$cookies.cart = JSON.stringify(cart);

            OrderService.confirmDirectCheckout(order).then(function(data) {
                console.log(data.data.order_id);
                vm.order.id = data.data.order_id;
                //$cookies.order = vm.order;

                $location.url("/order/tnx");
            });
        };

        vm.confirm = function() {
            if($scope.winnerForm.$valid) {
                if($('#country').val() !== null)  {
                    vm.order.country_code = vm.countries[$('#country').val()].code;
                    vm.order.country_name = vm.countries[$('#country').val()].name;
                }
                vm.order.prize_id = $cookies.prize_id;
                vm.order.code = $cookies.winner_code;

                PrizeService.confirmDirectCheckout(vm.order).then(function(data) {
                    console.log(data);
                    $cookieStore.remove('winner_code');
                    $cookieStore.remove('prize_id');
                    $location.url("/winners/tnx");
                },
                function(data) {
                    console.log(data);
                    //error
                });
            }
        };

        vm.cancelConfirmation = function() {
            $cookieStore.remove('prize_id');
            $location.url("/winners/prizes/" + $cookies.winner_code + "/");
        };

        function init() {
            if(!$cookies.hasOwnProperty("winner_code")) {
                return $location.url("/");
            }

            $timeout(function () {
                window.prettyPrint && prettyPrint();

                [].slice.call( document.querySelectorAll( 'select.cs-select' ) ).forEach( function(el) {
					new SelectFx(el, {
                      onChange: function(val) {
                        vm.order[el.name] = val;
                      }
                    });
				} );

            }, 10);
        }

        init();
    }

})();



var country_codes = [
    {code: "AF", name: "Afghanistan"},
    {code: "AX", name: "Aland Islands"},
    {code: "AL", name: "Albania"},
    {code: "DZ", name: "Algeria"},
    {code: "AS", name: "American Samoa"},
    {code: "AD", name: "Andorra"},
    {code: "AO", name: "Angola"},
    {code: "AI", name: "Anguilla"},
    {code: "AQ", name: "Antarctica"},
    {code: "AG", name: "Antigua and Barbuda"},
    {code: "AR", name: "Argentina"},
    {code: "AM", name: "Armenia"},
    {code: "AW", name: "Aruba"},
    {code: "AU", name: "Australia"},
    {code: "AT", name: "Austria"},
    {code: "AZ", name: "Azerbaijan"},
    {code: "BS", name: "Bahamas"},
    {code: "BH", name: "Bahrain"},
    {code: "BD", name: "Bangladesh"},
    {code: "BB", name: "Barbados"},
    {code: "BY", name: "Belarus"},
    {code: "BE", name: "Belgium"},
    {code: "BZ", name: "Belize"},
    {code: "BJ", name: "Benin"},
    {code: "BM", name: "Bermuda"},
    {code: "BT", name: "Bhutan"},
    {code: "BO", name: "Bolivia"},
    {code: "BA", name: "Bosnia and Herzegovina"},
    {code: "BW", name: "Botswana"},
    {code: "BV", name: "Bouvet Island"},
    {code: "BR", name: "Brazil"},
    {code: "IO", name: "British Indian Ocean Territory"},
    {code: "BN", name: "Brunei Darussalam"},
    {code: "BG", name: "Bulgaria"},
    {code: "BF", name: "Burkina Faso"},
    {code: "BI", name: "Burundi"},
    {code: "KH", name: "Cambodia"},
    {code: "CM", name: "Cameroon"},
    {code: "CA", name: "Canada"},
    {code: "CV", name: "Cape Verde"},
    {code: "KY", name: "Cayman Islands"},
    {code: "CF", name: "Central African Republic"},
    {code: "TD", name: "Chad"},
    {code: "CL", name: "Chile"},
    {code: "CN", name: "China"},
    {code: "CX", name: "Christmas Island"},
    {code: "CC", name: "Cocos (Keeling) Islands"},
    {code: "CO", name: "Colombia"},
    {code: "KM", name: "Comoros"},
    {code: "CG", name: "Congo"},
    {code: "CD", name: "Congo, The Democratic Republic of the"},
    {code: "CK", name: "Cook Islands"},
    {code: "CR", name: "Costa Rica"},
    {code: "CI", name: "Côte d'Ivoire"},
    {code: "HR", name: "Croatia"},
    {code: "CU", name: "Cuba"},
    {code: "CY", name: "Cyprus"},
    {code: "CZ", name: "Czech Republic"},
    {code: "DK", name: "Denmark"},
    {code: "DJ", name: "Djibouti"},
    {code: "DM", name: "Dominica"},
    {code: "DO", name: "Dominican Republic"},
    {code: "EC", name: "Ecuador"},
    {code: "EG", name: "Egypt"},
    {code: "SV", name: "El Salvador"},
    {code: "GQ", name: "Equatorial Guinea"},
    {code: "ER", name: "Eritrea"},
    {code: "EE", name: "Estonia"},
    {code: "ET", name: "Ethiopia"},
    {code: "FK", name: "Falkland Islands (Malvinas)"},
    {code: "FO", name: "Faroe Islands"},
    {code: "FJ", name: "Fiji"},
    {code: "FI", name: "Finland"},
    {code: "FR", name: "France"},
    {code: "GF", name: "French Guiana"},
    {code: "PF", name: "French Polynesia"},
    {code: "TF", name: "French Southern Territories"},
    {code: "GA", name: "Gabon"},
    {code: "GM", name: "Gambia"},
    {code: "GE", name: "Georgia"},
    {code: "DE", name: "Germany"},
    {code: "GH", name: "Ghana"},
    {code: "GI", name: "Gibraltar"},
    {code: "GR", name: "Greece"},
    {code: "GL", name: "Greenland"},
    {code: "GD", name: "Grenada"},
    {code: "GP", name: "Guadeloupe"},
    {code: "GU", name: "Guam"},
    {code: "GT", name: "Guatemala"},
    {code: "GG", name: "Guernsey"},
    {code: "GN", name: "Guinea"},
    {code: "GW", name: "Guinea-Bissau"},
    {code: "GY", name: "Guyana"},
    {code: "HT", name: "Haiti"},
    {code: "HM", name: "Heard Island and McDonald Islands"},
    {code: "VA", name: "Holy See (Vatican City State)"},
    {code: "HN", name: "Honduras"},
    {code: "HK", name: "Hong Kong"},
    {code: "HU", name: "Hungary"},
    {code: "IS", name: "Iceland"},
    {code: "IN", name: "India"},
    {code: "ID", name: "Indonesia"},
    {code: "IR", name: "Iran, Islamic Republic of"},
    {code: "IQ", name: "Iraq"},
    {code: "IE", name: "Ireland"},
    {code: "IM", name: "Isle of Man"},
    {code: "IL", name: "Israel"},
    {code: "IT", name: "Italy"},
    {code: "JM", name: "Jamaica"},
    {code: "JP", name: "Japan"},
    {code: "JE", name: "Jersey"},
    {code: "JO", name: "Jordan"},
    {code: "KZ", name: "Kazakhstan"},
    {code: "KE", name: "Kenya"},
    {code: "KI", name: "Kiribati"},
    {code: "KP", name: "Korea, Democratic People's Republic of"},
    {code: "KR", name: "Korea, Republic of"},
    {code: "KW", name: "Kuwait"},
    {code: "KG", name: "Kyrgyzstan"},
    {code: "LA", name: "Lao People's Democratic Republic"},
    {code: "LV", name: "Latvia"},
    {code: "LB", name: "Lebanon"},
    {code: "LS", name: "Lesotho"},
    {code: "LR", name: "Liberia"},
    {code: "LY", name: "Libyan Arab Jamahiriya"},
    {code: "LI", name: "Liechtenstein"},
    {code: "LT", name: "Lithuania"},
    {code: "LU", name: "Luxembourg"},
    {code: "MO", name: "Macao"},
    {code: "MK", name: "Macedonia, The Former Yugoslav Republic of"},
    {code: "MG", name: "Madagascar"},
    {code: "MW", name: "Malawi"},
    {code: "MY", name: "Malaysia"},
    {code: "MV", name: "Maldives"},
    {code: "ML", name: "Mali"},
    {code: "MT", name: "Malta"},
    {code: "MH", name: "Marshall Islands"},
    {code: "MQ", name: "Martinique"},
    {code: "MR", name: "Mauritania"},
    {code: "MU", name: "Mauritius"},
    {code: "YT", name: "Mayotte"},
    {code: "MX", name: "Mexico"},
    {code: "FM", name: "Micronesia, Federated States of"},
    {code: "MD", name: "Moldova"},
    {code: "MC", name: "Monaco"},
    {code: "MN", name: "Mongolia"},
    {code: "ME", name: "Montenegro"},
    {code: "MS", name: "Montserrat"},
    {code: "MA", name: "Morocco"},
    {code: "MZ", name: "Mozambique"},
    {code: "MM", name: "Myanmar"},
    {code: "NA", name: "Namibia"},
    {code: "NR", name: "Nauru"},
    {code: "NP", name: "Nepal"},
    {code: "NL", name: "Netherlands"},
    {code: "AN", name: "Netherlands Antilles"},
    {code: "NC", name: "New Caledonia"},
    {code: "NZ", name: "New Zealand"},
    {code: "NI", name: "Nicaragua"},
    {code: "NE", name: "Niger"},
    {code: "NG", name: "Nigeria"},
    {code: "NU", name: "Niue"},
    {code: "NF", name: "Norfolk Island"},
    {code: "MP", name: "Northern Mariana Islands"},
    {code: "NO", name: "Norway"},
    {code: "OM", name: "Oman"},
    {code: "PK", name: "Pakistan"},
    {code: "PW", name: "Palau"},
    {code: "PS", name: "Palestinian Territory, Occupied"},
    {code: "PA", name: "Panama"},
    {code: "PG", name: "Papua New Guinea"},
    {code: "PY", name: "Paraguay"},
    {code: "PE", name: "Peru"},
    {code: "PH", name: "Philippines"},
    {code: "PN", name: "Pitcairn"},
    {code: "PL", name: "Poland"},
    {code: "PT", name: "Portugal"},
    {code: "PR", name: "Puerto Rico"},
    {code: "QA", name: "Qatar"},
    {code: "RE", name: "Réunion"},
    {code: "RO", name: "Romania"},
    {code: "RU", name: "Russian Federation"},
    {code: "RW", name: "Rwanda"},
    {code: "BL", name: "Saint Barthélemy"},
    {code: "SH", name: "Saint Helena"},
    {code: "KN", name: "Saint Kitts and Nevis"},
    {code: "LC", name: "Saint Lucia"},
    {code: "MF", name: "Saint Martin"},
    {code: "PM", name: "Saint Pierre and Miquelon"},
    {code: "VC", name: "Saint Vincent and the Grenadines"},
    {code: "WS", name: "Samoa"},
    {code: "SM", name: "San Marino"},
    {code: "ST", name: "Sao Tome and Principe"},
    {code: "SA", name: "Saudi Arabia"},
    {code: "SN", name: "Senegal"},
    {code: "RS", name: "Serbia"},
    {code: "SC", name: "Seychelles"},
    {code: "SL", name: "Sierra Leone"},
    {code: "SG", name: "Singapore"},
    {code: "SK", name: "Slovakia"},
    {code: "SI", name: "Slovenia"},
    {code: "SB", name: "Solomon Islands"},
    {code: "SO", name: "Somalia"},
    {code: "ZA", name: "South Africa"},
    {code: "GS", name: "South Georgia and the South Sandwich Islands"},
    {code: "ES", name: "Spain"},
    {code: "LK", name: "Sri Lanka"},
    {code: "SD", name: "Sudan"},
    {code: "SR", name: "Suriname"},
    {code: "SJ", name: "Svalbard and Jan Mayen"},
    {code: "SZ", name: "Swaziland"},
    {code: "SE", name: "Sweden"},
    {code: "CH", name: "Switzerland"},
    {code: "SY", name: "Syrian Arab Republic"},
    {code: "TW", name: "Taiwan, Province of China"},
    {code: "TJ", name: "Tajikistan"},
    {code: "TZ", name: "Tanzania, United Republic of"},
    {code: "TH", name: "Thailand"},
    {code: "TL", name: "Timor-Leste"},
    {code: "TG", name: "Togo"},
    {code: "TK", name: "Tokelau"},
    {code: "TO", name: "Tonga"},
    {code: "TT", name: "Trinidad and Tobago"},
    {code: "TN", name: "Tunisia"},
    {code: "TR", name: "Turkey"},
    {code: "TM", name: "Turkmenistan"},
    {code: "TC", name: "Turks and Caicos Islands"},
    {code: "TV", name: "Tuvalu"},
    {code: "UG", name: "Uganda"},
    {code: "UA", name: "Ukraine"},
    {code: "AE", name: "United Arab Emirates"},
    {code: "GB", name: "United Kingdom"},
    {code: "US", name: "United States"},
    {code: "UM", name: "United States Minor Outlying Islands"},
    {code: "UY", name: "Uruguay"},
    {code: "UZ", name: "Uzbekistan"},
    {code: "VU", name: "Vanuatu"},
    {code: "VE", name: "Venezuela"},
    {code: "VN", name: "Viet Nam"},
    {code: "VG", name: "Virgin Islands, British"},
    {code: "VI", name: "Virgin Islands, U.S."},
    {code: "WF", name: "Wallis and Futuna"},
    {code: "EH", name: "Western Sahara"},
    {code: "YE", name: "Yemen"},
    {code: "ZM", name: "Zambia"},
    {code: "ZW", name: "Zimbabwe"}
];
/**
 * controller for Winners page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('WinnersController', WinnersController);

    WinnersController.$inject = ['$scope', '$timeout', 'CompetitionService'];

    function WinnersController($scope, $timeout, CompetitionService) {
        $scope.competition_list = null;
        load_competition_list();

        function load_competition_list() {
            return CompetitionService.getFinishedList().then(function (data) {
                $scope.competition_list = data;
                console.log(data);
            });
        }

        $scope.convertDate = function(strDate) {
            // Split timestamp into [ Y, M, D, h, m, s ]
            var t = strDate.split(/[- :]/);

            // Apply each element to the Date function
            var d = new Date(t[0], t[1]-1, t[2]);

            return d.format("mediumDate");
        };

        $scope.showPrizes = function(index) {
            $scope.competition_list[index].show_prizes = true;
            $('.items-best-prize').slick();
            $('.items-best-prize').slick('slickGoTo', 0);
        };

        $scope.showPhoto = function(index) {
            $scope.competition_list[index].show_prizes = false;
        };
    }
})();
/**
 * Prize detail controller
 * for prize block on competition page and prize popup on catalog page
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('WinnerPrizeDetailController', WinnerPrizeDetailController);

    WinnerPrizeDetailController.$inject = ['$scope', '$controller', '$routeParams', '$cookies', '$location', '$timeout', 'ngCart', 'CatalogService', 'ezfb'];

    function WinnerPrizeDetailController($scope, $controller, $routeParams, $cookies, $location, $timeout, ngCart, CatalogService, ezfb) {
        //var pd = this;
        $controller('PrizeDetailController', {$scope: $scope}); //This works

        $scope.showPrice = false;

        $scope.selectPrize = function(selectedPrize) {
            $cookies.prize_id = selectedPrize.id;
            $location.url("/winners/confirm");
        };
    }

})();
/**
 * controller for Winners prize list
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('WinnerPrizeListController', WinnerPrizeListController);

    WinnerPrizeListController.$inject = ['$scope', '$routeParams', '$location', '$cookies', 'CompetitionService', 'PrizeService'];

    function WinnerPrizeListController($scope, $routeParams, $location, $cookies, CompetitionService, PrizeService) {
        $scope.competition = CompetitionService.getCompetition();
        $scope.prizes = [];
        $scope.showPrice = false;
        $scope.detailLink = "/#!/winners/prize/";

        $scope.getPrizes = function () {
            return $scope.prizes;
        };

        function init() {
            if (typeof $routeParams.code != 'undefined') {
                PrizeService.getWinner($routeParams.code).then(function(winner) {
                    if(winner !== null) {
                        if(winner.prize !== null) {
                            $location.url("/winners/tnx");
                        }
                        else
                        {
                            // save code in cookie
                            $cookies.winner_code = $routeParams.code;

                            PrizeService.getWinnerList($routeParams.code).then(function(data) {
                                $scope.prizes = data;
                            });
                        }
                    }
                    else
                    {
                        $location.url("/");
                    }
                });

            }

        }

        init();
    }
})();
/**
 * controller for Text pages
 */
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('TextController', TextController);

    TextController.$inject = ['$scope', '$routeParams'];

    function TextController($scope, $routeParams) {
        $scope.active_text = null;

        function init() {
            if (typeof $routeParams.text_id != 'undefined') {
                $scope.active_text = $routeParams.text_id;
            }
            else {
                $scope.active_text = "aboutus";
            }
        }

        init();

    }
})();